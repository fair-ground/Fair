{
  "abstract" : [
    {
      "text" : "Returns true if the entitlement is enabled for the current process,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "or ",
      "type" : "text"
    },
    {
      "code" : "nil",
      "type" : "codeVoice"
    },
    {
      "text" : " if the entitlement was not set",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/FairApp\/documentation\/FairApp",
        "doc:\/\/FairApp\/documentation\/FairApp\/AppEntitlement"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/FairApp\/documentation\/FairApp\/AppEntitlement\/isEnabled(forTask:)"
  },
  "kind" : "symbol",
  "metadata" : {
    "extendedModule" : "FairApp",
    "externalID" : "s:7FairApp0B11EntitlementV9isEnabled7forTaskSbSgSo03SecG3RefaSg_tF",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "func"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "isEnabled"
      },
      {
        "kind" : "text",
        "text" : "("
      },
      {
        "kind" : "externalParam",
        "text" : "forTask"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "c:@T@SecTaskRef",
        "text" : "SecTask"
      },
      {
        "kind" : "text",
        "text" : "?) -> "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:Sb",
        "text" : "Bool"
      },
      {
        "kind" : "text",
        "text" : "?"
      }
    ],
    "modules" : [
      {
        "name" : "FairApp"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Instance Method",
    "symbolKind" : "method",
    "title" : "isEnabled(forTask:)"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "func"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "isEnabled"
            },
            {
              "kind" : "text",
              "text" : "("
            },
            {
              "kind" : "externalParam",
              "text" : "forTask"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "c:@T@SecTaskRef",
              "text" : "SecTask"
            },
            {
              "kind" : "text",
              "text" : "? = nil) -> "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:Sb",
              "text" : "Bool"
            },
            {
              "kind" : "text",
              "text" : "?"
            }
          ]
        }
      ],
      "kind" : "declarations"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/fairapp\/appentitlement\/isenabled(fortask:)"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://FairApp/documentation/FairApp": {
  "abstract" : [
    {
      "text" : "Library build atop ",
      "type" : "text"
    },
    {
      "code" : "FairCore",
      "type" : "codeVoice"
    },
    {
      "text" : " to facilitate working with fair-ground apps.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/FairApp\/documentation\/FairApp",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "FairApp",
  "type" : "topic",
  "url" : "\/documentation\/fairapp"
},
"doc://FairApp/documentation/FairApp/AppEntitlement": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AppEntitlement"
    }
  ],
  "identifier" : "doc:\/\/FairApp\/documentation\/FairApp\/AppEntitlement",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AppEntitlement"
    }
  ],
  "role" : "symbol",
  "title" : "AppEntitlement",
  "type" : "topic",
  "url" : "\/documentation\/fairapp\/appentitlement"
},
"doc://FairApp/documentation/FairApp/AppEntitlement/isEnabled(forTask:)": {
  "abstract" : [
    {
      "text" : "Returns true if the entitlement is enabled for the current process,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "or ",
      "type" : "text"
    },
    {
      "code" : "nil",
      "type" : "codeVoice"
    },
    {
      "text" : " if the entitlement was not set",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "isEnabled"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "forTask"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "c:@T@SecTaskRef",
      "text" : "SecTask"
    },
    {
      "kind" : "text",
      "text" : "?) -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : "?"
    }
  ],
  "identifier" : "doc:\/\/FairApp\/documentation\/FairApp\/AppEntitlement\/isEnabled(forTask:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "isEnabled(forTask:)",
  "type" : "topic",
  "url" : "\/documentation\/fairapp\/appentitlement\/isenabled(fortask:)"
}
}
}