{
  "abstract" : [
    {
      "text" : "The basis of one of multiple possible types, equivalent to an",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "Either",
      "type" : "codeVoice"
    },
    {
      "text" : " sum type.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/FairCore\/documentation\/FairCore"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:8FairCore3XOrO",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "enum"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "XOr"
      }
    ],
    "modules" : [
      {
        "name" : "FairCore"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "XOr"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Enumeration",
    "symbolKind" : "enum",
    "title" : "XOr"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "Linux"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "indirect"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "enum"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "XOr"
            },
            {
              "kind" : "text",
              "text" : "<"
            },
            {
              "kind" : "genericParameter",
              "text" : "P"
            },
            {
              "kind" : "text",
              "text" : ">"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "A choice between two different types is expressed by ",
              "type" : "text"
            },
            {
              "code" : "XOr<P>.Or<Q>",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let stringOrInt: XOr<String>.Or<Int>"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Additional types can be expressed by chaining ",
              "type" : "text"
            },
            {
              "code" : "Or",
              "type" : "codeVoice"
            },
            {
              "text" : " types.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let stringOrIntOrBool: XOr<String>.Or<Int>.Or<Bool>",
            "let dateOrURLOrDataOrUUID: XOr<Date>.Or<URL>.Or<Data>.Or<UUID>"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "code" : "XOr.Or",
              "type" : "codeVoice"
            },
            {
              "text" : " adopts ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : " when its associated types adopt ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Decoding is accomplished by trying to decode each encapsulated",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "type separately and accepting the first successfully decoded result.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This can present an issue for types that can encode to the same serialized data,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "such as ",
              "type" : "text"
            },
            {
              "code" : "XOr<Double>.Or<Float>",
              "type" : "codeVoice"
            },
            {
              "text" : ", since encoded the ",
              "type" : "text"
            },
            {
              "code" : "Float",
              "type" : "codeVoice"
            },
            {
              "text" : " side will then",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "be decoded as the ",
              "type" : "text"
            },
            {
              "code" : "Double",
              "type" : "codeVoice"
            },
            {
              "text" : " side, which might be unexpected since it will",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "fail an equality check. To work around this, the encapsulated types",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "would need a type discriminator field to ensure that both sides",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "are mutually exclusive for decoding.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In short, given ",
              "type" : "text"
            },
            {
              "code" : "typealias DoubleOrFloat = XOr<Double>.Or<Float>",
              "type" : "codeVoice"
            },
            {
              "text" : ": ",
              "type" : "text"
            },
            {
              "code" : "try DoubleOrFloat(Float(1.0)).encoded().decoded() != DoubleOrFloat(Float(1.0))",
              "type" : "codeVoice"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/FairCore\/Se",
        "doc:\/\/FairCore\/SE",
        "doc:\/\/FairCore\/SQ",
        "doc:\/\/FairCore\/s5ErrorP",
        "doc:\/\/FairCore\/SH",
        "doc:\/\/FairCore\/SY",
        "doc:\/\/FairCore\/s8SendableP"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/p(_:)"
      ],
      "title" : "Enumeration Cases"
    },
    {
      "identifiers" : [
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/init(_:)",
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/init(rawValue:)"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/rawValue"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Value"
      ],
      "title" : "Type Aliases"
    },
    {
      "identifiers" : [
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Or"
      ],
      "title" : "Enumerations"
    },
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Decodable-Implementations",
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Encodable-Implementations",
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Equatable-Implementations",
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Error-Implementations",
        "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/RawRepresentable-Implementations"
      ],
      "title" : "Default Implementations"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/faircore\/xor"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://FairCore/SE": {
  "identifier" : "doc:\/\/FairCore\/SE",
  "title" : "Swift.Encodable",
  "type" : "unresolvable"
},
"doc://FairCore/SH": {
  "identifier" : "doc:\/\/FairCore\/SH",
  "title" : "Swift.Hashable",
  "type" : "unresolvable"
},
"doc://FairCore/SQ": {
  "identifier" : "doc:\/\/FairCore\/SQ",
  "title" : "Swift.Equatable",
  "type" : "unresolvable"
},
"doc://FairCore/SY": {
  "identifier" : "doc:\/\/FairCore\/SY",
  "title" : "Swift.RawRepresentable",
  "type" : "unresolvable"
},
"doc://FairCore/Se": {
  "identifier" : "doc:\/\/FairCore\/Se",
  "title" : "Swift.Decodable",
  "type" : "unresolvable"
},
"doc://FairCore/documentation/FairCore": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "FairCore",
  "type" : "topic",
  "url" : "\/documentation\/faircore"
},
"doc://FairCore/documentation/FairCore/XOr": {
  "abstract" : [
    {
      "text" : "The basis of one of multiple possible types, equivalent to an",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "code" : "Either",
      "type" : "codeVoice"
    },
    {
      "text" : " sum type.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "XOr"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "XOr"
    }
  ],
  "role" : "symbol",
  "title" : "XOr",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor"
},
"doc://FairCore/documentation/FairCore/XOr/Decodable-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Decodable-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Decodable Implementations",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/decodable-implementations"
},
"doc://FairCore/documentation/FairCore/XOr/Encodable-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Encodable-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Encodable Implementations",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/encodable-implementations"
},
"doc://FairCore/documentation/FairCore/XOr/Equatable-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Equatable-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Equatable Implementations",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/equatable-implementations"
},
"doc://FairCore/documentation/FairCore/XOr/Error-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Error-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "Error Implementations",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/error-implementations"
},
"doc://FairCore/documentation/FairCore/XOr/Or": {
  "abstract" : [
    {
      "text" : "A sum type: ",
      "type" : "text"
    },
    {
      "code" : "XOr<P>.Or<Q>",
      "type" : "codeVoice"
    },
    {
      "text" : " can hold either an ",
      "type" : "text"
    },
    {
      "code" : "P",
      "type" : "codeVoice"
    },
    {
      "text" : " or a ",
      "type" : "text"
    },
    {
      "code" : "Q",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "E.g., ",
      "type" : "text"
    },
    {
      "code" : "XOr<Int>.Or<String>.Or<Bool>",
      "type" : "codeVoice"
    },
    {
      "text" : " can hold either an ",
      "type" : "text"
    },
    {
      "code" : "Int",
      "type" : "codeVoice"
    },
    {
      "text" : " or a ",
      "type" : "text"
    },
    {
      "code" : "String",
      "type" : "codeVoice"
    },
    {
      "text" : " or a ",
      "type" : "text"
    },
    {
      "code" : "Bool",
      "type" : "codeVoice"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "enum"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Or"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Or",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Or"
    }
  ],
  "role" : "symbol",
  "title" : "XOr.Or",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/or"
},
"doc://FairCore/documentation/FairCore/XOr/RawRepresentable-Implementations": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/RawRepresentable-Implementations",
  "kind" : "article",
  "role" : "collectionGroup",
  "title" : "RawRepresentable Implementations",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/rawrepresentable-implementations"
},
"doc://FairCore/documentation/FairCore/XOr/Value": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Value"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/Value",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Value"
    }
  ],
  "role" : "symbol",
  "title" : "XOr.Value",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/value"
},
"doc://FairCore/documentation/FairCore/XOr/init(_:)": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "P"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/init(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(_:)",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/init(_:)"
},
"doc://FairCore/documentation/FairCore/XOr/init(rawValue:)": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "rawValue"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "P"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/init(rawValue:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init(rawValue:)",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/init(rawvalue:)"
},
"doc://FairCore/documentation/FairCore/XOr/p(_:)": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "case"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "p"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "typeIdentifier",
      "text" : "P"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/p(_:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "XOr.p(_:)",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/p(_:)"
},
"doc://FairCore/documentation/FairCore/XOr/rawValue": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "rawValue"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "text" : "P"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/XOr\/rawValue",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "rawValue",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/xor\/rawvalue"
},
"doc://FairCore/s5ErrorP": {
  "identifier" : "doc:\/\/FairCore\/s5ErrorP",
  "title" : "Swift.Error",
  "type" : "unresolvable"
},
"doc://FairCore/s8SendableP": {
  "identifier" : "doc:\/\/FairCore\/s8SendableP",
  "title" : "Swift.Sendable",
  "type" : "unresolvable"
}
}
}