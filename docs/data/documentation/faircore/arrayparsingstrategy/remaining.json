{
  "abstract" : [
    {
      "text" : "Parse all remaining arguments into an array.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/FairCore\/documentation\/FairCore",
        "doc:\/\/FairCore\/documentation\/FairCore\/ArrayParsingStrategy"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/FairCore\/documentation\/FairCore\/ArrayParsingStrategy\/remaining"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:8FairCore20ArrayParsingStrategyV9remainingACvpZ",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "static"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "keyword",
        "text" : "var"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "remaining"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:8FairCore20ArrayParsingStrategyV",
        "text" : "ArrayParsingStrategy"
      }
    ],
    "modules" : [
      {
        "name" : "FairCore"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Type Property",
    "symbolKind" : "property",
    "title" : "remaining"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "static"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "var"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "remaining"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/ArrayParsingStrategy",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:8FairCore20ArrayParsingStrategyV",
              "text" : "ArrayParsingStrategy"
            },
            {
              "kind" : "text",
              "text" : " { "
            },
            {
              "kind" : "keyword",
              "text" : "get"
            },
            {
              "kind" : "text",
              "text" : " }"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "code" : ".remaining",
              "type" : "codeVoice"
            },
            {
              "text" : " can be used for capturing pass-through flags. For example, for",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "a parsable type defined as",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "@Option(parsing: .remaining) var passthrough: [String]",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "$ cmd --passthrough --foo 1 --bar 2 -xvf",
            "------------",
            "options.passthrough == [\"--foo\", \"1\", \"--bar\", \"2\", \"-xvf\"]"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "This will read all inputs following the option without attempting to do any parsing. This is",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "usually ",
                  "type" : "text"
                },
                {
                  "inlineContent" : [
                    {
                      "text" : "not",
                      "type" : "text"
                    }
                  ],
                  "type" : "emphasis"
                },
                {
                  "text" : " what users would expect. Use with caution.",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "style" : "note",
          "type" : "aside"
        },
        {
          "inlineContent" : [
            {
              "text" : "Consider using a trailing ",
              "type" : "text"
            },
            {
              "code" : "@Argument",
              "type" : "codeVoice"
            },
            {
              "text" : " instead and letting users explicitly turn off parsing",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "through the terminator ",
              "type" : "text"
            },
            {
              "code" : "--",
              "type" : "codeVoice"
            },
            {
              "text" : ". That is the more common approach. For example:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Options: ParsableArguments {",
            "    @Option var name: String",
            "    @Argument var remainder: [String]",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "would parse the input ",
              "type" : "text"
            },
            {
              "code" : "--name Foo -- Bar --baz",
              "type" : "codeVoice"
            },
            {
              "text" : " such that the ",
              "type" : "text"
            },
            {
              "code" : "remainder",
              "type" : "codeVoice"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "would hold the value ",
              "type" : "text"
            },
            {
              "code" : "[\"Bar\", \"--baz\"]",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/faircore\/arrayparsingstrategy\/remaining"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://FairCore/documentation/FairCore": {
  "abstract" : [
    {
      "text" : "The core library for fair-ground apps and tools.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "FairCore",
  "type" : "topic",
  "url" : "\/documentation\/faircore"
},
"doc://FairCore/documentation/FairCore/ArrayParsingStrategy": {
  "abstract" : [
    {
      "text" : "The strategy to use when parsing multiple values from ",
      "type" : "text"
    },
    {
      "code" : "@Option",
      "type" : "codeVoice"
    },
    {
      "text" : " arguments into an",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "array.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ArrayParsingStrategy"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/ArrayParsingStrategy",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ArrayParsingStrategy"
    }
  ],
  "role" : "symbol",
  "title" : "ArrayParsingStrategy",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/arrayparsingstrategy"
},
"doc://FairCore/documentation/FairCore/ArrayParsingStrategy/remaining": {
  "abstract" : [
    {
      "text" : "Parse all remaining arguments into an array.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "remaining"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8FairCore20ArrayParsingStrategyV",
      "text" : "ArrayParsingStrategy"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/ArrayParsingStrategy\/remaining",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "remaining",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/arrayparsingstrategy\/remaining"
}
}
}