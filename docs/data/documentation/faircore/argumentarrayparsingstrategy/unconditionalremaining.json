{
  "abstract" : [
    {
      "text" : "Parse all remaining inputs after parsing any known options or flags,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "including dash-prefixed inputs and the ",
      "type" : "text"
    },
    {
      "code" : "--",
      "type" : "codeVoice"
    },
    {
      "text" : " terminator.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/FairCore\/documentation\/FairCore",
        "doc:\/\/FairCore\/documentation\/FairCore\/ArgumentArrayParsingStrategy"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/FairCore\/documentation\/FairCore\/ArgumentArrayParsingStrategy\/unconditionalRemaining"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:8FairCore28ArgumentArrayParsingStrategyV22unconditionalRemainingACvpZ",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "static"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "keyword",
        "text" : "var"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "unconditionalRemaining"
      },
      {
        "kind" : "text",
        "text" : ": "
      },
      {
        "kind" : "typeIdentifier",
        "preciseIdentifier" : "s:8FairCore28ArgumentArrayParsingStrategyV",
        "text" : "ArgumentArrayParsingStrategy"
      }
    ],
    "modules" : [
      {
        "name" : "FairCore"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Type Property",
    "symbolKind" : "property",
    "title" : "unconditionalRemaining"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "Linux"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "static"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "keyword",
              "text" : "var"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "unconditionalRemaining"
            },
            {
              "kind" : "text",
              "text" : ": "
            },
            {
              "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/ArgumentArrayParsingStrategy",
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:8FairCore28ArgumentArrayParsingStrategyV",
              "text" : "ArgumentArrayParsingStrategy"
            },
            {
              "kind" : "text",
              "text" : " { "
            },
            {
              "kind" : "keyword",
              "text" : "get"
            },
            {
              "kind" : "text",
              "text" : " }"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "discussion",
          "level" : 2,
          "text" : "Discussion",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "When you use the ",
              "type" : "text"
            },
            {
              "code" : "unconditionalRemaining",
              "type" : "codeVoice"
            },
            {
              "text" : " parsing strategy, the parser",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "stops parsing flags and options as soon as it encounters a positional",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "argument or an unrecognized flag. For example, for a parsable type",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "defined as following:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct Options: ParsableArguments {",
            "    @Flag",
            "    var verbose: Bool = false",
            "",
            "    @Argument(parsing: .unconditionalRemaining)",
            "    var words: [String] = []",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Parsing the input ",
              "type" : "text"
            },
            {
              "code" : "--verbose one two --verbose",
              "type" : "codeVoice"
            },
            {
              "text" : " includes the second",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "--verbose",
              "type" : "codeVoice"
            },
            {
              "text" : " flag in ",
              "type" : "text"
            },
            {
              "code" : "words",
              "type" : "codeVoice"
            },
            {
              "text" : ", resulting in",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "Options(verbose: true, words: [\"one\", \"two\", \"--verbose\"])",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "content" : [
            {
              "inlineContent" : [
                {
                  "text" : "This parsing strategy can be surprising for users, particularly",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "when combined with options and flags. Prefer ",
                  "type" : "text"
                },
                {
                  "code" : "remaining",
                  "type" : "codeVoice"
                },
                {
                  "text" : " whenever",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "possible, since users can always terminate options and flags with",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "the ",
                  "type" : "text"
                },
                {
                  "code" : "--",
                  "type" : "codeVoice"
                },
                {
                  "text" : " terminator. With the ",
                  "type" : "text"
                },
                {
                  "code" : "remaining",
                  "type" : "codeVoice"
                },
                {
                  "text" : " parsing strategy, the input",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "code" : "--verbose -- one two --verbose",
                  "type" : "codeVoice"
                },
                {
                  "text" : " would have the same result as the above",
                  "type" : "text"
                },
                {
                  "text" : " ",
                  "type" : "text"
                },
                {
                  "text" : "example: ",
                  "type" : "text"
                },
                {
                  "code" : "Options(verbose: true, words: [\"one\", \"two\", \"--verbose\"])",
                  "type" : "codeVoice"
                },
                {
                  "text" : ".",
                  "type" : "text"
                }
              ],
              "type" : "paragraph"
            }
          ],
          "style" : "note",
          "type" : "aside"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/faircore\/argumentarrayparsingstrategy\/unconditionalremaining"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://FairCore/documentation/FairCore": {
  "abstract" : [

  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "FairCore",
  "type" : "topic",
  "url" : "\/documentation\/faircore"
},
"doc://FairCore/documentation/FairCore/ArgumentArrayParsingStrategy": {
  "abstract" : [
    {
      "text" : "The strategy to use when parsing multiple values from positional arguments",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "into an array.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ArgumentArrayParsingStrategy"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/ArgumentArrayParsingStrategy",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ArgumentArrayParsingStrategy"
    }
  ],
  "role" : "symbol",
  "title" : "ArgumentArrayParsingStrategy",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/argumentarrayparsingstrategy"
},
"doc://FairCore/documentation/FairCore/ArgumentArrayParsingStrategy/unconditionalRemaining": {
  "abstract" : [
    {
      "text" : "Parse all remaining inputs after parsing any known options or flags,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "including dash-prefixed inputs and the ",
      "type" : "text"
    },
    {
      "code" : "--",
      "type" : "codeVoice"
    },
    {
      "text" : " terminator.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "unconditionalRemaining"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8FairCore28ArgumentArrayParsingStrategyV",
      "text" : "ArgumentArrayParsingStrategy"
    }
  ],
  "identifier" : "doc:\/\/FairCore\/documentation\/FairCore\/ArgumentArrayParsingStrategy\/unconditionalRemaining",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "unconditionalRemaining",
  "type" : "topic",
  "url" : "\/documentation\/faircore\/argumentarrayparsingstrategy\/unconditionalremaining"
}
}
}