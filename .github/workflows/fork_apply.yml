##############################################################################
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

# This workflow runs in both the trusted base repository at
# https://www.github.com/appfair/App/actions as well as in
# and forks that have enabled actions. The latter workflow
# will build the app and create a release in the fork's repository,
# while the workflow in the base repository will
# build the app a second time in a trusted environment and,
# if the two binaries match, publish a `fairseal` hash of
# the release artifacts for verification by the App Fair catalog
# browser app. See https://www.appfair.net for more details.
name: "Fork Apply"

on:
  workflow_call:
    inputs:
      # the name of the fairground organization (e.g., "appfair")
      fairground:
        type: string
        required: true
      target_macos:
        type: boolean
        required: true
      target_ios:
        type: boolean
        required: true
      target_tvos:
        type: boolean
        required: false
        default: false
      target_watchos:
        type: boolean
        required: false
        default: false
      target_linux:
        type: boolean
        required: false
        default: false
      target_windows:
        type: boolean
        required: false
        default: false
    secrets:
      NOTARY_TEAMID:
        required: false
      NOTARY_USERID:
        required: false
      NOTARY_PASSWORD:
        required: false
      NOTARY_CERTKEY_P12_BASE64:
        required: false
      NOTARY_CERTKEY_PASSWORD:
        required: false

jobs:
  # The Fork-Apply phases run in the /App.git fork's repository.
  # This workflow builds and validates the app, and if a semver tag 
  # tag is pushed, it will also create a release and publish the artifacts.
  # Released artifacts will only be published in the App Fair catalog
  # once the Integrate-Release phases (below) are successfully run
  # and a fairseal is published.
  fork_apply:
    name: "Fork Apply"
    if: github.event_name == 'push'
    runs-on: macos-11
    timeout-minutes: 45

    env:
      DEVELOPER_DIR: /Applications/Xcode_13.1.app/Contents/Developer
      ZERO_AR_DATE: 1

    steps:
      - name: "Initialize fair-ground"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
          echo "ORGNAME=${{ github.repository_owner }}" >> $GITHUB_ENV
          echo "COMMITHASH=${{ github.sha }}" >> $GITHUB_ENV

      - name: "Configure Fork: ${{ env.ORGNAME }}"
        run: |
          echo "FAIR_APP_ARTIFACT=${{ env.ORGNAME }}" >> $GITHUB_ENV
          echo "PRODUCT_NAME=$(echo ${{ env.ORGNAME }} | tr '-' ' ')" >> $GITHUB_ENV
          echo "BUNDLE_ID=app.$(echo ${{ env.ORGNAME }})" >> $GITHUB_ENV
          echo "BUILDING PRODUCT: ${{ env.PRODUCT_NAME }}"

      - name: "Install fairtool"
        if: false # needs macOS 12
        run: brew install --build-from-source fair-ground/tool/fairtool

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: "Validate App Organization: ${{ env.ORGNAME }}"
        run: xcrun swift run -- fairtool validate --verbose true --hub "github.com/${{ inputs.fairground }}" --org "${{ env.ORGNAME }}" --token "${{ secrets.GITHUB_TOKEN }}" --project . --output -

      - name: "Generate Icon"
        run: xcrun swift run -- fairtool icon --org "${{ env.ORGNAME }}" --accent-color "Assets.xcassets/AccentColor.colorset/Contents.json" --output Assets.xcassets/AppIcon.appiconset/AppIcon-1024.png --output Assets.xcassets/AppIcon.appiconset/AppIcon-512.png || true # tolerate failure

      - name: "Test Swift Package"
        if: false # needs macOS 12 # github.event_name == 'push' # only run tests in forks
        run: xcrun swift test

      - name: "Resolve Swift Packages"
        run: |
          swift package resolve
          cp Package.resolved Sources/App/Resources/

      - name: "Build iOS App"
        if: ${{ inputs.target_ios }} == true
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -configuration Release \
            -scheme "AppFairApp" \
            -sdk "iphoneos" \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-iOS.xcarchive" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="-" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            FAIRAPP_PRODUCT_NAME="${{ env.PRODUCT_NAME }}"

          cp -a "staging/.${{ env.FAIR_APP_ARTIFACT }}-iOS.xcarchive/Products/Applications" "staging/Payload"
          ditto -c -k --sequesterRsrc --keepParent "staging/Payload" "staging/${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa"

      - name: "Build macOS App"
        if: ${{ inputs.target_macos }} == true
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -configuration Release \
            -scheme "AppFairApp" \
            -sdk "macosx" \
            -destination "platform=macOS" \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-macOS.xcarchive" \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="-" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            DEVELOPMENT_TEAM="" \
            CODE_SIGN_IDENTITY="-" \
            OTHER_CODE_SIGNING_FLAGS="--timestamp=none" \
            OTHER_LIBTOOLFLAGS="-D" \
            FAIRAPP_PRODUCT_NAME="${{ env.PRODUCT_NAME }}"
          shasum -a 256 "staging/.${{ env.FAIR_APP_ARTIFACT }}-macOS.xcarchive/Products/Applications"/*.app/Contents/MacOS/*

          echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>method</key><string>mac-application</string><key>signingStyle</key><string>automatic</string><key>uploadBitcode</key><false/><key>compileBitcode</key><false/><key>uploadSymbols</key><false/></dict></plist>' > "staging/.exportOptions.plist"

          xcodebuild \
            -exportArchive \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-macOS.xcarchive" \
            -exportPath "staging/" \
            -exportOptionsPlist "staging/.exportOptions.plist"

          codesign --verify --verbose=5 "staging/${{ env.PRODUCT_NAME }}.app"
          codesign -dv --verbose=5 "staging/${{ env.PRODUCT_NAME }}.app"
          codesign -d --entitlements - "staging/${{ env.PRODUCT_NAME }}.app"

          # create the zip file
          ditto -c -k --sequesterRsrc --keepParent "staging/${{ env.PRODUCT_NAME }}.app" "staging/${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

      # Notarization is not required for the App Fair, but a developer
      # can opt to notarize their own build which will allow them to 
      # distribute the app outside of the App Fair without having to
      # make a separate notarized release.
      #
      # The fairground's app validation does not take into account the
      # notarization or signing status of the zip when it validates
      # the release artifacts, nor does it have access to the signing
      # secrets for the fork's repository, and so the app can be signed
      # with any certificate without affecting
      # the integration-release validation. 
      #
      # To enable signing an notarization, the fork's secrets will
      # need to be setup to include the following keys:
      #
      # NOTARY_USERID: The Apple ID for developer ID
      # NOTARY_PASSWORD: An app-specific password for the developer
      # NOTARY_TEAMID: The Team ID associated with the developer
      # NOTARY_CERTKEY_P12_BASE64: The exported certificate and key (see below)
      # NOTARY_CERTKEY_PASSWORD: The password for the exported certificate
      #
      # To obtain the NOTARY_CERTKEY_P12_BASE64 value,
      # you'll need to request a certificate from Apple, 
      # import it into the Keychain, and then export is as a .p12
      # file, which will be base64 encoded and saved into the GitHub secret.
      #
      # First get a Developer ID certificate by logging into your 
      # developer account and selecting Certificates IDs & Profiles,
      # then create a new Developer ID Application certificate.
      #
      # To get a CSR Keychain Access and going to
      # Certificate Assistant -> Request a Certificate from a Certificate Authority
      # and ensure the "CA Email Address" matches the developer e-mail,
      # then save to disk.
      # Then upload the CSR request file to the portal and it will
      # create a new certificate for you. 
      # Download it and add it to your Keychain Access by opening it. 
      # The certificate should be added to one of your default keychains 
      # and not to the system keychain;
      # otherwise you might later have troubles exporting it.
      #
      # The signing data can then be exported from Keychain Access.app by 
      # going to the "Certificates" tab and finding the 
      # "Developer ID Application: DEVNAME (DEVID)" entry that has a single
      # child private key named "Mac Developer ID Application: DEVNAME".
      #
      # Select **BOTH** items and right-click select "Export 2 Items…".
      # Export to "Certificates.p12" and select a password.
      # Create a GitHub Org secret called 
      # "NOTARIZATION_SIGNING_PASSWORD" with the value of that password.
      #
      # Next copy the "NOTARY_CERTKEY_P12_BASE64" to the clipboard with:
      #
      #   `base64 Certificates.p12 | pbcopy`
      #
      # In your GitHub organization Secrets settings, paste the value
      # into a "NOTARY_CERTKEY_P12_BASE64" key.
      #
      # Reference: https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
      - name: "Notarize macOS App"
        if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push' && "${{ secrets.NOTARY_TEAMID }}" != ''
        run: |
          mkdir -p .notarization
          security delete-keychain fairsign.keychain || true
          security create-keychain -p "${{ secrets.NOTARY_CERTKEY_PASSWORD }}" fairsign.keychain
          security default-keychain -s fairsign.keychain
          security list-keychains -s fairsign.keychain

          # import certificate
          echo "${{ secrets.NOTARY_CERTKEY_P12_BASE64 }}" | base64 -d -o .notarization/fairsign.p12
          security import .notarization/fairsign.p12 -k fairsign.keychain -P "${{ secrets.NOTARY_CERTKEY_PASSWORD }}" -A
          rm -f .notarization/fairsign.p12

          security set-key-partition-list -S "apple-tool:,apple:,codesign:" -s -k "${{ secrets.NOTARY_CERTKEY_PASSWORD }}" fairsign.keychain

          # show valid identities
          security find-identity -v

          # re-sign the app with the imported certificate and the identity
          codesign --force -v --options runtime --entitlements "Sandbox.entitlements" -s "`security find-identity -v | cut -f 4 -d ' ' | head -n 1`" "staging/${{ env.PRODUCT_NAME }}.app"

          # re-create the archive with the signed app for submission
          ditto -c -k --sequesterRsrc --keepParent "staging/${{ env.PRODUCT_NAME }}.app" "staging/${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

          # perform notarization and wait for success
          xcrun notarytool submit --wait --progress --apple-id "${{ secrets.NOTARY_USERID }}" --password "${{ secrets.NOTARY_PASSWORD }}" --team-id "${{ secrets.NOTARY_TEAMID }}" "staging/${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

          # staple the notarization ticket to the app
          xcrun stapler staple "staging/${{ env.PRODUCT_NAME }}.app"

          # re-create the archive with the signed & stapled artifact
          ditto -c -k --sequesterRsrc --keepParent "staging/${{ env.PRODUCT_NAME }}.app" "staging/${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

      - name: "Stage Release Metadata"
        if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        # Extract the Info.plist from the archives themselves, since they contain
        # the same post-processed metadata that the app will use.
        # And convert to XML for ease of integration.
        run: |
          # show the binary checksum
          openssl sha256 "staging/${{ env.PRODUCT_NAME }}.app/Contents/MacOS/"*
          openssl sha256 "staging/${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

          cp Assets.xcassets/AppIcon.appiconset/AppIcon-1024.png staging/"${{ env.FAIR_APP_ARTIFACT }}.png"
          cp README.md LICENSE.txt Info.plist Sandbox.entitlements Package.resolved screenshots/screenshot-[a-z]*-[0-9][0-9]-[0-9]*x[0-9]*.png staging/
          ls -la staging/

          find staging/ -type d -maxdepth 1 -exec rm -rf {} \; # remove directories from staging

          # log the checksum for each of the staging elements
          openssl sha256 staging/*.*

      # create and upload the release artifacts, which will be
      # vaidates in the base fair-ground by integrate_release
      - name: "Release App"
        if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading release assets: ${GITHUB_REF#refs/tags/}"
          # create a pre-release if it doesn't already exist 
          # TODO: --prerelease ?
          gh release create "${GITHUB_REF#refs/tags/}" || true

          # upload staging assets to the existing GitHub release
          gh release upload "${GITHUB_REF#refs/tags/}" -- staging/*.*

          # ideally, we would automatically create the 
          # integrate-release pull request here, but tying to 
          # create one raises the error:
          #
          # "pull request create failed: GraphQL error: Resource not accessible by integration"
          #
          # This is because forked repositories only have read access:
          #
          # https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
          #
          # We cannot use "Send write tokens to workflows from pull requests"
          # due to it being restricted to private repositories:
          #
          # https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#enabling-workflows-for-private-repository-forks
          #
          # Another alternative could be to require the forked user to 
          # set up a PAT with write permission, but that's a big ask.
          #
          # So for now, we just require the user to open a PR
          # manually and set its title correctly.
          #
          # For more information, see:
          # https://github.community/t/github-actions-are-severely-limited-on-prs/18179

          # git stash || true # ensure that local changes (e.g., the icon) are discarded
          # git checkout main # ensure we are on main
          # git status
          # gh pr create --no-maintainer-edit --repo "${{ inputs.fairground }}/App" --title "${{ env.BUNDLE_ID }} ${GITHUB_REF#refs/tags/}" --body "${{ env.BUNDLE_ID }} release ${GITHUB_REF#refs/tags/}"

