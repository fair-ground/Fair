##############################################################################
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

# This workflow runs in both the trusted base repository at
# https://www.github.com/appfair/App/actions as well as in
# and forks that have enabled actions. The latter workflow
# will build the app and create a release in the fork's repository,
# while the workflow in the base repository will
# build the app a second time in a trusted environment and,
# if the two binaries match, publish a `fairseal` hash of
# the release artifacts for verification by the App Fair catalog
# browser app. See https://www.appfair.net for more details.
name: "Integrate Release"

on:
  workflow_call:

jobs:
  # The Integrate-Release phases run in the trusted base fairground.
  # This workflow validates and re-builds the app, and if the artifact hash
  # matches that of the public release, it will publish the fairseal
  # required for inclusion in the catalog.  
  integrate_release:
    name: "Integrate Release"
    if: github.event_name == 'pull_request_target' && github.repository == 'appfair/App'

    runs-on: macos-11
    timeout-minutes: 45
    env:
      DEVELOPER_DIR: /Applications/Xcode_13.1.app/Contents/Developer
      ZERO_AR_DATE: 1

    steps:
      - name: "Initialize fair-ground"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "$GITHUB_CONTEXT"
          echo "PRTITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "ORGNAME=${{ github.event.pull_request.head.user.login }}" >> $GITHUB_ENV
          echo "COMMITHASH=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "PRID=${{ github.event.pull_request.id }}" >> $GITHUB_ENV

      - name: "Configure App: ${{ env.ORGNAME }}"
        run: |
          echo "FAIR_APP_ARTIFACT=${{ env.ORGNAME }}" >> $GITHUB_ENV
          echo "PRODUCT_NAME=$(echo ${{ env.ORGNAME }} | tr '-' ' ')" >> $GITHUB_ENV
          echo "BUNDLE_ID=app.$(echo ${{ env.ORGNAME }})" >> $GITHUB_ENV
          echo "BUILDING PRODUCT: ${{ env.PRODUCT_NAME }}"
 
      - name: Checkout Base Fairground
        uses: actions/checkout@v2

      - name: Checkout Integrate PR
        uses: actions/checkout@v2
        with:
          path: ReleasePR
          ref: ${{ env.COMMITHASH }}
          fetch-depth: 0
          submodules: false

      - name: Verify workflow integrity
        # the workflows must be identical; fetch & merge upstream if this fails
        run: diff -r .github/workflows/ ReleasePR/.github/workflows/
        # didn't you notice the "DO NOT MODIFY" notice at the top?

      - name: Get version tag
        id: get_semver_tag
        run: echo ::set-output name=semver_tag::$(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' ReleasePR/Info.plist)

      - name: "Validate App-Name: ${{ env.ORGNAME }}"
        run: |
          xcrun swift run -- fairtool validate \
            --project ReleasePR \
            --hub github.com/appfair \
            --token "${{ secrets.GITHUB_TOKEN }}" \
            --org "${{ env.ORGNAME }}" \
            --ref "${{ env.COMMITHASH }}" \
            --integrationTitle "${{ env.PRTITLE }}" \
            --fairseal-issuer "appfairbot" \
            --allow-license "AGPL-3.0" \
            --allow-name "${{ secrets.APP_FAIR_ALLOW_NAME }}" \
            --deny-name "${{ secrets.APP_FAIR_DENY_NAME }}" \
            --allow-from "${{ secrets.APP_FAIR_ALLOW_FROM }}" \
            --deny-from "${{ secrets.APP_FAIR_DENY_FROM }}" \
            --maxsize $[100 * 1024 * 1024] \
            --verbose true \
            --output -

      - name: Integrate PR
        run: |
          rm -rf "staging/"
          mkdir "staging/"

          xcrun swift run -- fairtool merge --verbose true --hub github.com/appfair --org "${{ env.ORGNAME }}" --token "${{ secrets.GITHUB_TOKEN }}" --project ReleasePR --output .

          xcrun swift run -- fairtool validate --hub github.com/appfair --org "${{ env.ORGNAME }}" --token "${{ secrets.GITHUB_TOKEN }}" --project .

          # next generate a default icon, if one doesn't yet exist
          xcrun swift run -- fairtool icon --org "${{ env.ORGNAME }}" --accent-color "Assets.xcassets/AccentColor.colorset/Contents.json" --output Assets.xcassets/AppIcon.appiconset/AppIcon-1024.png --output Assets.xcassets/AppIcon.appiconset/AppIcon-512.png || true # tolerate failure
          file Assets.xcassets/AppIcon.appiconset/AppIcon-1024.png
        
          #xcrun swift run -- fairtool edit --project . --hub github.com/appfair --bundle-id "${{ env.BUNDLE_ID }}" --display-name "${{ env.PRODUCT_NAME }}"

          cp -a .build/checkouts Dependencies
          tar cvzf "staging/${{ env.FAIR_APP_ARTIFACT }}-source.tgz" --exclude='.git/' --exclude='.build/' --exclude='staging/' .
          rm -rf Dependencies

          xcrun swift package resolve
          cat Package.resolved # useful for the log
          cp Package.resolved Sources/App/Resources/ # embed in the app

      - name: "Pre-build iOS App: ${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa"
        # this should be unnecessary, but for some reason we need to build twice
        # in order to guarantee that a reproducible artifact is produced
        if: true
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -configuration Release \
            -scheme "AppFairApp" \
            -sdk "iphoneos" \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-iOS.xcarchive" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="-" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            FAIRAPP_PRODUCT_NAME="${{ env.PRODUCT_NAME }}"

      - name: "Build iOS App: ${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa"
        # there's no way to export iOS archives without re-signing with a teamID, 
        # so just build the .ipa manually; it needs to be in Staging/ first
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -configuration Release \
            -scheme "AppFairApp" \
            -sdk "iphoneos" \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-iOS.xcarchive" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="-" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            FAIRAPP_PRODUCT_NAME="${{ env.PRODUCT_NAME }}"

          cp -a "staging/.${{ env.FAIR_APP_ARTIFACT }}-iOS.xcarchive/Products/Applications" "staging/Payload"
          ditto -c -k --sequesterRsrc --keepParent "staging/Payload" "staging/${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa"

      - name: "Pre-build macOS App: ${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"
        # this should be unnecessary, but for some reason we need to build twice
        # in order to guarantee that a reproducible artifact is produced
        if: true
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -configuration Release \
            -scheme "AppFairApp" \
            -sdk "macosx" \
            -destination "platform=macOS" \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-macOS.xcarchive" \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="-" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            FAIRAPP_PRODUCT_NAME="${{ env.PRODUCT_NAME }}"

      - name: "Build macOS App: ${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"
        run: |
          xcodebuild archive \
            -workspace "App.xcworkspace" \
            -configuration Release \
            -scheme "AppFairApp" \
            -sdk "macosx" \
            -destination "platform=macOS" \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-macOS.xcarchive" \
            CODE_SIGNING_REQUIRED=YES \
            CODE_SIGNING_ALLOWED=YES \
            AD_HOC_CODE_SIGNING_ALLOWED=YES \
            CODE_SIGN_IDENTITY="-" \
            PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
            FAIRAPP_PRODUCT_NAME="${{ env.PRODUCT_NAME }}"

          echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>method</key><string>mac-application</string><key>signingStyle</key><string>automatic</string></dict></plist>' > "staging/exportOptions.plist"

          xcodebuild \
            -exportArchive \
            -archivePath "staging/.${{ env.FAIR_APP_ARTIFACT }}-macOS.xcarchive" \
            -exportPath "staging/" \
            -exportOptionsPlist "staging/exportOptions.plist"

          codesign --verify --verbose=5 "staging/${{ env.PRODUCT_NAME }}.app"
          codesign -dv --verbose=5 "staging/${{ env.PRODUCT_NAME }}.app"
          codesign -d --entitlements - "staging/${{ env.PRODUCT_NAME }}.app"
          ditto -c -k --sequesterRsrc --keepParent "staging/${{ env.PRODUCT_NAME }}.app" "staging/${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

          # show the binary checksum
          openssl sha256 "staging/${{ env.PRODUCT_NAME }}.app/Contents/MacOS/"*
          openssl sha256 "staging/${{ env.FAIR_APP_ARTIFACT }}-macOS.zip"

          rm -rf "staging/${{ env.PRODUCT_NAME }}.app" # cleanup

      - name: Stage Release Metadata
        # copy over the un-processed assets from the ReleasePR/
        run: |
          cp Assets.xcassets/AppIcon.appiconset/AppIcon-1024.png staging/"${{ env.FAIR_APP_ARTIFACT }}.png"
          cp LICENSE.txt Package.resolved ReleasePR/README.md ReleasePR/Info.plist ReleasePR/Sandbox.entitlements ReleasePR/screenshots/screenshot-[a-z]*-[0-9][0-9]-[0-9]*x[0-9]*.png staging/
          ls -la staging/
          # log the checksum for each of the staging elements
          shasum -a 256 staging/*.*

      # compare the contents of the PR's un-trusted artifacts with
      # the contents of the base fair-ground's trusted artifacts
      - name: "Generate macOS fairseal"
        env:
          GITHUB_TOKEN: ${{ secrets.APP_FAIR_BOT_TOKEN }}
        run: |
          # build the URL for the GitHub download artifact
          ZIPURL="https://github.com/${{ env.ORGNAME }}/App/releases/download/${{ steps.get_semver_tag.outputs.semver_tag }}/${{ env.FAIR_APP_ARTIFACT }}-macOS.zip" 

          echo "Generating fairseal for: $ZIPURL"

          mkdir -p staging/.artifact_stash
          mv staging/*.ipa staging/.artifact_stash/ # don't seal the ipa when sealing macOS

          # if the seals match, we indicate success by publishing
          # the SHA256 for the release's pull request;
          # client apps will use this hash to verify that the untrusted
          # release artifact that is downloaded matches the release
          # artifact that was created in the trusted environment
          xcrun swift run -- fairtool fairseal \
            --verbose true \
            --hub github.com/appfair \
            --token "${{ secrets.APP_FAIR_BOT_TOKEN }}" \
            --org "${{ env.ORGNAME }}" \
            --ref "${{ env.COMMITHASH }}" \
            --trusted-artifact "staging/${{ env.FAIR_APP_ARTIFACT }}-macOS.zip" \
            --fairseal-match 0 \
            --retry-duration 600 \
            --artifact-url "$ZIPURL" \
            --artifact-staging "staging/" \
            --accent-color "Assets.xcassets/AccentColor.colorset/Contents.json" \
            --project . -o -

          mv staging/.artifact_stash/* staging/ # restore stash

          # also run diffoscope to see what it says about the differences
          brew install diffoscope || true # in case it is already installed
          curl -o /tmp/checkartifact.zip "$ZIPURL"
          diffoscope --html staging/diffoscope-macOS.html /tmp/checkartifact.zip "staging/${{ env.FAIR_APP_ARTIFACT }}-macOS.zip" || true # tolerate changes while developing reproducible builds

      - name: "Generate iOS fairseal"
        env:
          GITHUB_TOKEN: ${{ secrets.APP_FAIR_BOT_TOKEN }}
        run: |
          # build the URL for the GitHub download artifact
          IPAURL="https://github.com/${{ env.ORGNAME }}/App/releases/download/${{ steps.get_semver_tag.outputs.semver_tag }}/${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa" 

          echo "Generating fairseal for: $IPAURL"

          mkdir -p staging/.artifact_stash
          mv staging/*.zip staging/.artifact_stash/ # don't seal the macOS zip for iOS seal

          # Builds on iOS are currently not reproducible (help wanted!),
          # so we accept a diff tolerance of 1,000,000 bytes for fairseal-match
          xcrun swift run -- fairtool fairseal \
            --verbose true \
            --hub github.com/appfair \
            --token "${{ secrets.APP_FAIR_BOT_TOKEN }}" \
            --org "${{ env.ORGNAME }}" \
            --ref "${{ env.COMMITHASH }}" \
            --trusted-artifact "staging/${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa" \
            --fairseal-match 1000000 \
            --retry-duration 600 \
            --artifact-url "$IPAURL" \
            --artifact-staging "staging/" \
            --accent-color "Assets.xcassets/AccentColor.colorset/Contents.json" \
            --project . -o -

          mv staging/.artifact_stash/* staging/ # restore stash

          # also run diffoscope to see what it says about the differences
          curl -o /tmp/checkartifact.ipa "$IPAURL"
          diffoscope --html staging/diffoscope-iOS.html /tmp/checkartifact.ipa "staging/${{ env.FAIR_APP_ARTIFACT }}-iOS.ipa" || true # tolerate changes while developing reproducible builds

      - name: "Upload Build Artifacts"
        # upload the trusted artifacts for each build for reproducible-builds
        uses: actions/upload-artifact@v2
        if: always()
        with:
          path: staging

      - name: "Publish App Fair Catalog"
        env:
          GITHUB_TOKEN: ${{ secrets.APP_FAIR_BOT_TOKEN }}
        run: |
          # https://github.com/appfair/appfair.github.io/actions
          gh workflow --repo appfair/appfair.github.io run "catalog.yml"

      - name: "Close Pull Request"
        # Pull Requests are always closed after the integrate-release phases.
        # Re-builds can be initiated by re-opening the PR or making a new one.
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh pr close ${{ github.event.pull_request.html_url }}

